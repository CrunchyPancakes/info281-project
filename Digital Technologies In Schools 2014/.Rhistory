url <- paste0('https://www.nngroup.com/articles/?page=', next_page)
url
}
page_attributes <- url %>%
html_attrs(".article-pager a") %>%
html_text(trim = TRUE)
page_attributes <- url %>%
html_attrs("» Next") %>%
html_text(trim = TRUE)
page_attributes <- url %>%
html_attrs(".article-pager") %>%
html_text(trim = TRUE)
page_attributes <- url %>%
html_attrs() %>%
url <- html('https://www.nngroup.com/articles/?page=1')
url <- html('https://www.nngroup.com/articles/?page=1')
# Structure of loop
#   Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=1')
# Structure of loop
#   Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=1')
View(url)
remove('url')
url <- html('https://www.nngroup.com/articles/?page=1')
page_attributes <- url %>%
html_attrs("?page=1")
article_titles <- vector()
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
remove('url')
url <- html('https://www.nngroup.com/articles/?page=1')
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- vector()
while(last_element == "» Next"){
# Read article titles, using bespoke function.
article_titles <- append(article_titles, get_titles(url))
article_titles
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- paste0('https://www.nngroup.com/articles/?page=', next_page)
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
remove('url')
url <- html('https://www.nngroup.com/articles/?page=1')
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- vector()
while(last_element == "» Next"){
# Read article titles, using bespoke function.
article_titles <- append(article_titles, get_titles(url))
article_titles
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- paste0('https://www.nngroup.com/articles/?page=', next_page)
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
article_titles <- append(article_titles, get_titles(url))
article_titles <- append(article_titles, get_titles(url))
article_titles <- get_titles(url)
remove(article_titles)
article_titles <- get_titles(url)
get_titles <- function(html){
html %>%
# The relevant tag
html_nodes('#recentTab h3') %>%
html_text() %>%
# Trim additional white space
str_trim() %>%
# Convert the list into a vector
unlist()
}
article_titles <- get_titles(url)
url <- html('https://www.nngroup.com/articles/?page=1')
# General-purpose data wrangling
library(tidyverse)
# Parsing of HTML/XML files
library(rvest)
# String manipulation
library(stringr)
# Verbose regular expressions
library(rebus)
# Eases DateTime manipulation
library(lubridate)
# 'Index' url page to get articles from
url <- html('https://www.nngroup.com/articles/?page=1')
# function to get titles of articles
get_titles <- function(html){
html %>%
# The relevant tag
html_nodes('#recentTab h3') %>%
html_text() %>%
# Trim additional white space
str_trim() %>%
# Convert the list into a vector
unlist()
}
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=1')
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- get_titles(url)
while(last_element == "» Next"){
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- paste0('https://www.nngroup.com/articles/?page=', next_page)
# Read article titles, using bespoke function.
article_titles <- append(article_titles, get_titles(url))
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=1')
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- get_titles(url)
while(last_element == "» Next"){
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- paste0('https://www.nngroup.com/articles/?page=', next_page)
# Read article titles, using bespoke function.
article_titles <- get_titles(url)
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
article_titles <- get_titles(url)
article_titles <- get_titles(url)
url <- html('https://www.nngroup.com/articles/?page=1')
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=1')
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- get_titles(url)
while(last_element == "» Next"){
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- html(paste0('https://www.nngroup.com/articles/?page=', next_page))
# Read article titles, using bespoke function.
article_titles <- append(article_titles, get_titles(url))
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
article_titles
page_nums
# 'Index' url page to get articles from
url <- html('https://www.nngroup.com/articles/?page=140')
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
page_nums
#Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=140')
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
page_nums
# Read list of page numbers.
page_nums <- url %>%
html_nodes("#recentTab .article-pager a") %>%
html_text(trim = TRUE)
page_nums
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=140')
# Read list of page numbers.
page_nums <- url %>%
html_nodes("#recentTab .article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- get_titles(url)
while(last_element == "» Next"){
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- html(paste0('https://www.nngroup.com/articles/?page=', next_page))
# Read article titles, using bespoke function.
article_titles <- append(article_titles, get_titles(url))
# Read list of page numbers.
page_nums <- url %>%
html_nodes("#recentTab .article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
article_titles
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=1')
# Read list of page numbers.
page_nums <- url %>%
html_nodes("#recentTab .article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- get_titles(url)
while(last_element == "» Next"){
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- html(paste0('https://www.nngroup.com/articles/?page=', next_page))
# Read article titles, using bespoke function.
article_titles <- append(article_titles, get_titles(url))
# Read list of page numbers.
page_nums <- url %>%
html_nodes("#recentTab .article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
warnings()
article_titles
# read data into variable.
equipmentData <- read_csv('equipment_data.csv')
# load libraries
library(tidyverse)
# read data into variable.
equipmentData <- read_csv('equipment_data.csv')
setwd("~/VUW/2019/Tri 3/INFO 281 - 391/info281-project/Digital Technologies In Schools 2014")
# read data into variable.
equipmentData <- read_csv('equipment_data.csv')
selectedData <- equipmentData[c(1, 4, 7, 243)]
colnames(selectedData)
colnames(selected_data) <- c('respondent_id',
'total_school_roll',
'total_computers',
'decile')
colnames(selectedData) <- c('respondent_id',
'total_school_roll',
'total_computers',
'decile')
colnames(selectedData)
# change decile to a factor, so it is categorical.
selectedData$decile <-  factor(selectedData$decile, levels =
c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
, labels = c('One', 'Two',
'Three', 'Four',
'Five', 'Six',
'Seven', 'Eight',
'Nine', 'Ten',
'Missing'))
summary(selectedData)
view(selectedData)
# summary of selectedData.
summaryPlot <- Rmisc::summarySE(groupvars = c("decile"),
measurevar = "total_computers",
selectedData,
na.rm = T
)
summary(selectedData)
# summary of selectedData.
summaryPlot <- Rmisc::summarySE(groupvars = c("decile"),
measurevar = "total_computers",
selectedData,
na.rm = T
)
# summary of selectedData.
summaryPlot <- Rmisc::summarySE(groupvar = c("decile"),
measurevar = "total_computers",
selectedData,
na.rm = T
)
?summarySE
# summary of selectedData.
summaryPlot <- Rmisc::summarySE(groupvar = c("decile", "respondent_id"),
measurevar = "total_computers",
selectedData,
na.rm = T
)
summary(selectedData)
view(summary(selectedData))
# read data into variable.
equipmentData <- read_csv('equipment_data.csv')
# select specific columns.
# Use a vector of column numbers to get specific columns.
# ID, Total School Roll, Total Computers, Decile
selectedData <- equipmentData[c(1, 4, 7, 243)]
# rename selectedData columns.
colnames(selectedData) <- c('respondent_id',
'total_school_roll',
'total_computers',
'decile')
# change decile to a factor, so it is categorical.
selectedData$decile <-  factor(selectedData$decile, levels =
c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99)
, labels = c('One', 'Two',
'Three', 'Four',
'Five', 'Six',
'Seven', 'Eight',
'Nine', 'Ten',
'Missing'))
# Show a summary of selectedData to confirm cleaning.
summary(selectedData)
# summary of selectedData.
summaryPlot <- Rmisc::summarySE(groupvar = c("decile", "respondent_id"),
measurevar = "total_computers",
selectedData,
na.rm = T
)
view(selectedData)
data_long <- gather(selected_data[1:4], key = "measure", value = "count", -decile, -respondent_id)
data_long <- gather(selectedData[1:4], key = "measure", value = "count", -decile, -respondent_id)
view(data_long)
# convert data to long format.
data_long <- gather(selectedData[1:4], key = "measure", value = "count", -decile, -respondent_id)
# summary of selectedData.
summaryPlot <- Rmisc::summarySE(groupvar = c("decile", "measure"),
measurevar = "count",
selectedData,
na.rm = T
)
# summary of selectedData.
summaryPlot <- Rmisc::summarySE(groupvar = c("decile", "measure"),
measurevar = "count",
data_long,
na.rm = T
)
summary(data_long)
# summary of selectedData.
summaryPlot <- Rmisc::summarySE(groupvar = c("decile", "measure"),
measurevar = "count",
data_long,
na.rm = T
)
data_long %>%
ggplot() +
aes(x = measure, y = count, fill = decile) +
geom_bar(stat = 'identity')
data_long %>%
ggplot() +
aes(x = measure, y = count, fill = decile) +
geom_bar(stat = 'identity', position = 'dodge')
filteredData <- filter(data_long, decile = 'Missing')
filteredData <- filter(data_long, decile == 'Missing')
view(filteredData)
filteredData <- filter(data_long, decile != 'Missing')
view(filteredData)
# summary of selectedData.
summaryPlot <- Rmisc::summarySE(groupvar = c("decile", "measure"),
measurevar = "count",
filteredData,
na.rm = T
)
summaryPlot %>%
ggplot() +
aes(x = measure, y = count, fill = decile) +
geom_bar(stat = 'identity', position = 'dodge')
summaryPlot <- Rmisc::summarySE(groupvar = c("decile", "measure"),
measurevar = "count",
filteredData,
na.rm = T
)
view(summaryPlot)
summaryPlot %>%
ggplot() +
aes(x = measure, y = count, fill = decile) +
geom_bar(stat = 'identity', position = 'dodge') +
facet_wrap(decile)
summaryPlot %>%
ggplot() +
aes(x = measure, y = count, fill = decile) +
geom_bar(stat = 'identity', position = 'dodge') +
facet_wrap('decile')
summaryPlot %>%
ggplot() +
aes(x = measure, y = count, fill = decile) +
geom_bar(stat = 'identity', position = 'dodge')
summaryPlot %>%
ggplot() +
aes(x = measure, y = count, fill = decile) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_errorbar(aes(ymin = count - ci, ymax = count + ci), position = 'dodge')
?scale_fill_brewer
summaryPlot %>%
ggplot() +
aes(x = measure, y = count, fill = decile) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_errorbar(aes(ymin = count - ci, ymax = count + ci), position = 'dodge') +
scale_fill_viridis(discrete = TRUE)
summaryPlot %>%
ggplot() +
aes(x = measure, y = count, fill = decile) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_errorbar(aes(ymin = count - ci, ymax = count + ci), position = 'dodge') +
scale_fill_viridis_c()
summaryPlot %>%
ggplot() +
aes(x = measure, y = count, fill = decile) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_errorbar(aes(ymin = count - ci, ymax = count + ci), position = 'dodge') +
scale_fill_viridis_d()
# STRANGE LOOPS ------------------------------------------------------
m <- matrix(seq(1,100),nrow = 10, ncol = 10)
for(row in 1:nrow(m)){
print(m[row,1])
}
for(row in nrow(m):1){
print(m[row,1])
}
apply(m, 1, function(x){
print(x[2])
})
apply(m, c(1,2), function(x){
ifelse(x %% 2 == 0, "Even", "Uneven")
})
n <- ""
# without global assignment
apply(m, 1, function(x){
if(x[2] == 15) n <- "fifteen"
})
print(n)
# with global assignment using <<-
apply(m, 1, function(x){
if(x[2] == 15) n <<- "fifteen"
})
print(n)
