remove('url')
url <- html('https://www.nngroup.com/articles/?page=1')
page_attributes <- url %>%
html_attrs("?page=1")
article_titles <- vector()
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
remove('url')
url <- html('https://www.nngroup.com/articles/?page=1')
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- vector()
while(last_element == "» Next"){
# Read article titles, using bespoke function.
article_titles <- append(article_titles, get_titles(url))
article_titles
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- paste0('https://www.nngroup.com/articles/?page=', next_page)
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
remove('url')
url <- html('https://www.nngroup.com/articles/?page=1')
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- vector()
while(last_element == "» Next"){
# Read article titles, using bespoke function.
article_titles <- append(article_titles, get_titles(url))
article_titles
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- paste0('https://www.nngroup.com/articles/?page=', next_page)
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
article_titles <- append(article_titles, get_titles(url))
article_titles <- append(article_titles, get_titles(url))
article_titles <- get_titles(url)
remove(article_titles)
article_titles <- get_titles(url)
get_titles <- function(html){
html %>%
# The relevant tag
html_nodes('#recentTab h3') %>%
html_text() %>%
# Trim additional white space
str_trim() %>%
# Convert the list into a vector
unlist()
}
article_titles <- get_titles(url)
url <- html('https://www.nngroup.com/articles/?page=1')
# General-purpose data wrangling
library(tidyverse)
# Parsing of HTML/XML files
library(rvest)
# String manipulation
library(stringr)
# Verbose regular expressions
library(rebus)
# Eases DateTime manipulation
library(lubridate)
# 'Index' url page to get articles from
url <- html('https://www.nngroup.com/articles/?page=1')
# function to get titles of articles
get_titles <- function(html){
html %>%
# The relevant tag
html_nodes('#recentTab h3') %>%
html_text() %>%
# Trim additional white space
str_trim() %>%
# Convert the list into a vector
unlist()
}
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=1')
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- get_titles(url)
while(last_element == "» Next"){
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- paste0('https://www.nngroup.com/articles/?page=', next_page)
# Read article titles, using bespoke function.
article_titles <- append(article_titles, get_titles(url))
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=1')
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- get_titles(url)
while(last_element == "» Next"){
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- paste0('https://www.nngroup.com/articles/?page=', next_page)
# Read article titles, using bespoke function.
article_titles <- get_titles(url)
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
article_titles <- get_titles(url)
article_titles <- get_titles(url)
url <- html('https://www.nngroup.com/articles/?page=1')
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=1')
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- get_titles(url)
while(last_element == "» Next"){
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- html(paste0('https://www.nngroup.com/articles/?page=', next_page))
# Read article titles, using bespoke function.
article_titles <- append(article_titles, get_titles(url))
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
article_titles
page_nums
# 'Index' url page to get articles from
url <- html('https://www.nngroup.com/articles/?page=140')
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
page_nums
#Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=140')
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
page_nums
# Read list of page numbers.
page_nums <- url %>%
html_nodes("#recentTab .article-pager a") %>%
html_text(trim = TRUE)
page_nums
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=140')
# Read list of page numbers.
page_nums <- url %>%
html_nodes("#recentTab .article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- get_titles(url)
while(last_element == "» Next"){
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- html(paste0('https://www.nngroup.com/articles/?page=', next_page))
# Read article titles, using bespoke function.
article_titles <- append(article_titles, get_titles(url))
# Read list of page numbers.
page_nums <- url %>%
html_nodes("#recentTab .article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
article_titles
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=1')
# Read list of page numbers.
page_nums <- url %>%
html_nodes("#recentTab .article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- get_titles(url)
while(last_element == "» Next"){
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- html(paste0('https://www.nngroup.com/articles/?page=', next_page))
# Read article titles, using bespoke function.
article_titles <- append(article_titles, get_titles(url))
# Read list of page numbers.
page_nums <- url %>%
html_nodes("#recentTab .article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
warnings()
article_titles
x <- 3 + 4
x
x <- 2
while(1 < x){
x = x + 1
if(x = 10){
x = 0
}
}
x <- 2
while(1 < x)(
x = x + 1
if(x = 10)(
x = 0
)
)
m <- matrix(seq(1,100), nrow = 10, ncol = 10)
m
rowSums(m)
colSums(m)
apply(m,1,sum)
apply(m,2,sum)
apply(m, c(1,2), function(X) ifelse(x%%2 == 0, "Even", "Uneven"))
apply(m, c(1,2), function(X) ifelse(x%%2 == 0, "Even",
"Uneven"))
apply(m,3,sum) # colSums
apply(m,3,sum) # colSums
apply(m,0,sum) # colSums
apply(m,2,sum) # colSums
nrow(m)
ncol(m)
apply(m, c(1,2), function(X) ifelse(x%%2 == 0, "Even",
"Uneven"))
apply(m,c(1,2),sum) # colSums. 2 goes through cols.
apply(m, c(1,2), function(X) ifelse(x%%2 == 0, "Even",
"Uneven"))
apply(m, c(1,2), function(x) ifelse(x%%2 == 0, "Even", "Uneven"))
apply(m, c(1,2), function(X) ifelse(x%%2 == 0, "Even", "Uneven"))
apply(m, c(1,2), function(x) ifelse(x%%2 == 0, "Even", "Uneven"))
apply(m, c(1,2), function(X) ifelse(x%%2 == 0, "Even", "Uneven"))
apply(m, c(1,2), function(x) ifelse(x%%2 == 0, "Even", "Uneven"))
letters <- c("A","B","C","D")
letters_lower <- lapply(letters, tolower)
unlist(letters_lower)
?unlist
letters_lower
unlist(letters_lower)
?rnorm
df_1 <- data.frame(a = rnorm(20),
b = rnorm(20),
c = rnorm(20),
d = rnorm(20),
e = rnorm(20),
f = rnorm(20))
df_2 <- data.frame(a = rnorm(20),
b = rnorm(20),
c = rnorm(20),
d = rnorm(20),
e = rnorm(20),
f = rnorm(20))
df_list <- list(df_1, df_2)
lapply(df_list, rowMeans)
?rowMeans
lapply_reliability_df <- lapply(df_list, function(x){
psych::alpha(x[c("a", "b", "c")])$total$raw_alpha
})
df_mean <- lapply(df_list, rowMeans)
do.call(rbind, df_mean)
?rbind
do.call(cbind, df_mean)
df_list <- list(df_1)
df_mean <- lapply(df_list, rowMeans)
do.call(cbind, df_mean)
df_list <- list(df_1, df_2)
df_mean <- lapply(df_list, rowMeans)
do.call(cbind, df_mean)
lapply(list("apple", 1, 2, 3), function(x) x)
sapply(list("apple", 1, 2, 3), function(x) x)
vapply(list("apple", 1, 2, 3), function(x) {x}, FUN.VALUE = 1.00)
?FUN.VALUE
??FUN.VALUE
vapply(list("apple", 1, 2, 3), function(x){x}, FUN.VALUE = "pear")
vapply(list("apple", 1, 2, 3), function(x){x}, FUN.VALUE = "token")
f_example(3)
f_example <- function(x){x^2}
f_example(3)
body(f_example)
formals(f_example)
value_function <- function(x){inside_function <- x}
value_function(3)
inside_function
?lapply
environment(value_function)
environment(inside_function)
environment(value_function)
value_function <- function(x){inside_function <- x
environment(inside_function)}
value_function(3)
# install packages
install.packages('shiny')
library(shiny)
runExample("01_hello")
setwd("~/VUW/2019/Tri 3/INFO 281 - 391/info281-project/Shiny Practice/shiny_practice")
runApp()
runApp()
# run shiny app
runApp("app.r", display.mode = "showcase")
# run shiny app
runApp("app.r", display.mode = "showcase")
runApp("app.r", display.mode = "showcase")
runApp("app.r", display.mode = "showcase")
runApp("app.r", display.mode = "showcase")
# Run the application
shinyApp(ui = ui, server = server, display.mode = "showcase")
# Run the application
runApp("App-1", display.mode = "showcase")
# Run the application
runApp("app.r", display.mode = "showcase")
# Run the application
runApp("app.r", display.mode = "showcase")
source('app.R')
# Run the application
runApp("app", display.mode = "showcase")
getwd()
# Run the application
runApp("app.R", display.mode = "showcase")
runApp("app.R", display.mode = "showcase")
runApp("app.R", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app.r", display.mode = "showcase")
# Run the application
runApp("app.r", display.mode = "showcase")
runApp("app.r", display.mode = "showcase")
runApp('Lesson 2')
?sidebarLayout
?sidebarLayout
h1("my title")
runApp('Lesson 2')
runApp('Lesson 2')
runApp('Lesson 2')
setwd("~/VUW/2019/Tri 3/INFO 281 - 391/info281-project/Shiny Practice/shiny_practice/Lesson 2")
runApp()
runApp()
runApp()
runApp()
?a
runApp()
setwd("~/VUW/2019/Tri 3/INFO 281 - 391/info281-project/Shiny Practice/shiny_practice/Lesson 3")
runApp()
runApp()
?p
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sliderInput()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/VUW/2019/Tri 3/INFO 281 - 391/info281-project/Shiny Practice/shiny_practice/Lesson 4')
runApp("app.r", display.mode = "showcase")
setwd("~/VUW/2019/Tri 3/INFO 281 - 391/info281-project/Shiny Practice/shiny_practice/Lesson 4")
runApp("app.r", display.mode = "showcase")
runApp()
runApp()
runApp()
setwd("~/VUW/2019/Tri 3/INFO 281 - 391/info281-project/Shiny Practice/shiny_practice/Lesson 5")
install.packages(c("maps", "mapproj"))
colors()
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
library(maps)
library(mapproj)
source("helpers.r")
counties <- readRDS("data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
library(maps)
> library(mapproj)
> source("helpers.r")
> counties <- readRDS("data/counties.rds")
> percent_map(counties$white, "darkgreen", "% white")
library(shiny)
source("helpers.r")
counties <- readRDS("data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
library(maps)
library(mapproj)
source("helpers.r")
counties <- readRDS("data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
head(counties)
install.packages()
install.packages(c("maps", "mapproj"))
install.packages(c("maps", "mapproj"))
setwd("~/VUW/2019/Tri 3/INFO 281 - 391/info281-project/Shiny Practice/shiny_practice/Lesson 5")
library(maps)
library(mapproj)
source("helpers.R")
counties <- readRDS("data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
?switch
colors()
view(counties)
library(tidyverse)
view(counties)
shiny::runApp()
runApp()
runApp()
runApp()
setwd("~/VUW/2019/Tri 3/INFO 281 - 391/info281-project/Shiny Practice/shiny_practice/Lesson 5")
runApp()
runApp()
?.f
??.f
runApp()
runApp()
runApp()
runApp()
