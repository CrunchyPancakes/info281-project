html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- get_titles(url)
while(last_element == "» Next"){
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- paste0('https://www.nngroup.com/articles/?page=', next_page)
# Read article titles, using bespoke function.
article_titles <- append(article_titles, get_titles(url))
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=1')
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- get_titles(url)
while(last_element == "» Next"){
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- paste0('https://www.nngroup.com/articles/?page=', next_page)
# Read article titles, using bespoke function.
article_titles <- get_titles(url)
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
article_titles <- get_titles(url)
article_titles <- get_titles(url)
url <- html('https://www.nngroup.com/articles/?page=1')
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=1')
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- get_titles(url)
while(last_element == "» Next"){
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- html(paste0('https://www.nngroup.com/articles/?page=', next_page))
# Read article titles, using bespoke function.
article_titles <- append(article_titles, get_titles(url))
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
article_titles
page_nums
# 'Index' url page to get articles from
url <- html('https://www.nngroup.com/articles/?page=140')
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
page_nums
#Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=140')
# Read list of page numbers.
page_nums <- url %>%
html_nodes(".article-pager a") %>%
html_text(trim = TRUE)
page_nums
# Read list of page numbers.
page_nums <- url %>%
html_nodes("#recentTab .article-pager a") %>%
html_text(trim = TRUE)
page_nums
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=140')
# Read list of page numbers.
page_nums <- url %>%
html_nodes("#recentTab .article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- get_titles(url)
while(last_element == "» Next"){
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- html(paste0('https://www.nngroup.com/articles/?page=', next_page))
# Read article titles, using bespoke function.
article_titles <- append(article_titles, get_titles(url))
# Read list of page numbers.
page_nums <- url %>%
html_nodes("#recentTab .article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
article_titles
# Algorithm: Read through articles page and store titles in a vector.
#Read initial URL.
url <- html('https://www.nngroup.com/articles/?page=1')
# Read list of page numbers.
page_nums <- url %>%
html_nodes("#recentTab .article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
# Initialise vector
article_titles <- get_titles(url)
while(last_element == "» Next"){
# Get current page.
current_page <- url %>%
html_node('.currentpage') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Get next page.
next_page <- current_page + 1
# Update url.
url <- html(paste0('https://www.nngroup.com/articles/?page=', next_page))
# Read article titles, using bespoke function.
article_titles <- append(article_titles, get_titles(url))
# Read list of page numbers.
page_nums <- url %>%
html_nodes("#recentTab .article-pager a") %>%
html_text(trim = TRUE)
# Get last element in vector.
last_element <- tail(page_nums, n=1)
}
warnings()
article_titles
library(lubridate)
install.packages("VIM")
aggr_plot <- VIM::aggr(selected_data, col=c('navyblue','red'), numbers = TRUE, sortVars = TRUE,
labels = names(data), cex.axis = .7, gap = 3,
ylab = c("Histogram of missing data","Pattern"))
library(tidyverse)
# Read csv file
wvs <- read_csv("wvs6.csv")
# Get dimensions of dataset
dim(wvs)
# Select specific columns in dataset
selected_data <- wvs[c(4, 307, 113, 117, 118, 119, 120, 121)]
# Replace column names of dataset.
# Basically, the column names are a vector, so we can replace
# this with a vector of the same length.
colnames(selected_data) <- c("id", "class", "armed_forces", "police",
"courts", "government", "political_parties",
"parliament")
head(selected_data)
# Get a statistical summary of the dataset.
summary(selected_data)
# Turn class data into a factor.
# Because class is represented by numbers 1, 2, ... , 5, r thinks
# it is numerical/ continuous data, when in fact it is catergorical.
# Turning it into a factor fixes this.
selected_data$class <-  factor(selected_data$class, levels = c(1, 2, 3, 4, 5)
, labels = c("Upper class", "Upper middle class", "Lower middle class",
"Working class", "Lower class"))
# First, create a vector called 'recode'.
# These are the column names essentially.
to_recode <- c("class", "police", "courts", "government", "political_parties", "parliament", "armed_forces")
# Then, iterate through columns, replacing negative numbers with NAs
selected_data[,to_recode] <- lapply(selected_data[,to_recode], function(x){
car::recode(x," -2 = NA; -1 = NA; 4 = 1; 3 = 2; 2 = 3; 1 = 4")
})
setwd("~/VUW/2019/Tri 3/INFO 281 - 391/info281-project/General R Programming Practice")
# Read csv file
wvs <- read_csv("wvs6.csv")
# Get dimensions of dataset
dim(wvs)
# Select specific columns in dataset
selected_data <- wvs[c(4, 307, 113, 117, 118, 119, 120, 121)]
# Replace column names of dataset.
# Basically, the column names are a vector, so we can replace
# this with a vector of the same length.
colnames(selected_data) <- c("id", "class", "armed_forces", "police",
"courts", "government", "political_parties",
"parliament")
head(selected_data)
# Get a statistical summary of the dataset.
summary(selected_data)
# Turn class data into a factor.
# Because class is represented by numbers 1, 2, ... , 5, r thinks
# it is numerical/ continuous data, when in fact it is catergorical.
# Turning it into a factor fixes this.
selected_data$class <-  factor(selected_data$class, levels = c(1, 2, 3, 4, 5)
, labels = c("Upper class", "Upper middle class", "Lower middle class",
"Working class", "Lower class"))
# First, create a vector called 'recode'.
# These are the column names essentially.
to_recode <- c("class", "police", "courts", "government", "political_parties", "parliament", "armed_forces")
# Then, iterate through columns, replacing negative numbers with NAs
selected_data[,to_recode] <- lapply(selected_data[,to_recode], function(x){
car::recode(x," -2 = NA; -1 = NA; 4 = 1; 3 = 2; 2 = 3; 1 = 4")
})
aggr_plot <- VIM::aggr(selected_data, col=c('navyblue','red'), numbers = TRUE, sortVars = TRUE,
labels = names(data), cex.axis = .7, gap = 3,
ylab = c("Histogram of missing data","Pattern"))
aggr_plot
head(selected_data)
head(selected_data)
# Needs a key and value (the names for which we make up).
data_long <- gather(selected_data, key = "entity", value = "confidence")
# -id and -class omits these columns from the function.
data_long <- gather(selected_data, key = "entity", value = "confidence", -id, -class)
head(selected_data)
head(data_long)
view(data_long)
# Convert data from long to wide.
data_wide <- spread(data_long, key = "entity", value = "confidence")
head(data_wide)
head(data_wide)
head(selected_data)
time_df_long <- tibble(id = 1:10,
measure1_1 = rnorm(1:10),
measure1_2 = rnorm(1:10),
measure2_1 = rnorm(1:10),
measure2_2 = rnorm(1:10))
head(time_df_long)
head(time_df_long)
time_gathered <- gather(time_df_long, key = measure_time, value = value, -id)
head(time_df_long)
time_df_long <- tibble(id = 1:10,
measure1_1 = rnorm(1:10),
measure1_2 = rnorm(1:10),
measure2_1 = rnorm(1:10),
measure2_2 = rnorm(1:10))
time_gathered <- gather(time_df_long, key = measure_time, value = value, -id)
head(time_df_long)
head(time_gathered)
view(time_gathered)
time_split <- separate(time_gathered, col = "measure_time", into = "measure")
# Splits a column.
# In this case splits at the underscore e.g measure1_1 is split
# into measure1 and 1.
time_split <- separate(time_gathered, col = "measure_time", into = c("measure", "time"))
view(time_split)
table_a <- data.frame(v1 = c("A", "B", "C"),
v2 = c(1,2,3))
table_b <- data.frame(v1 = c("A", "B", "D"),
v3 = c(T,F,T))
# Refer to table name without quotes.
# Refer to column names with quotes, as a string.
# Can do:
# left_join()
# right_join()
# inner_join()
# full_join()
# anti_join()
table_c <- anti_join(table_a, table_b, by = "v1")
# Show heads of tables
head(table_a)
head(table_b)
head(table_c)
# full_join()
# anti_join()
table_c <- left_join(table_a, table_b, by = "v1")
# Show heads of tables
head(table_a)
head(table_b)
head(table_c)
table_a_na <- data.frame(v1 = c("A", "B", "C", NA, NA),
v2 = c(1,2,3,4,5))
table_b_na <- data.frame(v1 = c("A", "B", NA, NA, NA),
v2 = c(T,F,T,F,T))
na_merge <- left_join(table_a_na, table_b_na, by = "v1")
head(na_merge)
view(na_merge)
table_a_na <- data.frame(v1 = c("A", "B", "C", NA, NA),
v2 = c(1,2,3,4,5))
table_b_na <- data.frame(v1 = c("A", "B", NA, NA, NA),
v3 = c(T,F,T,F,T))
na_merge <- left_join(table_a_na, table_b_na, by = "v1")
head(na_merge)
view(na_merge)
# Selecting data from a data frame using conditionals.
filter(conf_wide, class == "Working class" & government > mean(government, na.rm = T))
# Selecting data from a data frame using conditionals.
filter(data_wide, class == "Working class" & government > mean(government, na.rm = T))
mean(government, na.rm = T)
filter(data_wide, class == "Working class" & government > mean(government))
# Selecting data from a data frame using conditionals.
# 'na.rm = T' means the function will skip over/ ignore NAs
filter(data_wide, class == "Working class" & government > mean(government, na.rm = T))
# Selecting data from a data frame using conditionals.
# 'na.rm = T' means the function will skip over/ ignore NAs
filter(data_wide, class == "Working class" & government > median(government, na.rm = T))
# %in% works very much like IN for SQL
filter(data_wide, class %in% c("working class", 'upper middle class'))
# %in% works very much like IN for SQL
filter(data_wide, class %in% c("working class", "upper middle class"))
# %in% works very much like IN for SQL
filter(data_wide, class %in% c("working class", "upper middle class"))
# Selecting data from a data frame using conditionals.
# 'na.rm = T' means the function will skip over/ ignore NAs.
filter(data_wide, class == "Working class" & government > mean(government, na.rm = T))
# %in% works very much like IN for SQL
filter(data_wide, class %in% c("working class", "upper middle class"))
# Convert data to a wide format.
data_wide <- spread(data_long, key = "entity", value = "confidence")
# %in% works very much like IN for SQL
filter(data_wide, class %in% c("working class", "upper middle class"))
# Selecting data from a data frame using conditionals.
# 'na.rm = T' means the function will skip over/ ignore NAs.
filter(data_wide, class == "working class" & government > mean(government, na.rm = T))
# Selecting data from a data frame using conditionals.
# 'na.rm = T' means the function will skip over/ ignore NAs.
filter(data_wide, class == "Working class" & government > mean(government, na.rm = T))
# %in% works very much like IN for SQL
filter(data_wide, class %in% c("Working class", "Upper middle class"))
summary_plot <- Rmisc::summarySE(groupvars = c("entity", "class"),
measurevar = "confidence",
gathered,
na.rm = T
)
# Install and load packages
install.packages('tidyverse')
library(tidyverse)
# Read csv file
wvs <- read_csv("wvs6.csv")
# Get dimensions of dataset
dim(wvs)
# Select specific columns in dataset
selected_data <- wvs[c(4, 307, 113, 117, 118, 119, 120, 121)]
# Replace column names of dataset.
# Basically, the column names are a vector, so we can replace
# this with a vector of the same length.
colnames(selected_data) <- c("id", "class", "armed_forces", "police",
"courts", "government", "political_parties",
"parliament")
head(selected_data)
# Get a statistical summary of the dataset.
summary(selected_data)
# Turn class data into a factor.
# Because class is represented by numbers 1, 2, ... , 5, r thinks
# it is numerical/ continuous data, when in fact it is catergorical.
# Turning it into a factor fixes this.
selected_data$class <-  factor(selected_data$class, levels = c(1, 2, 3, 4, 5)
, labels = c("Upper class", "Upper middle class", "Lower middle class",
"Working class", "Lower class"))
# First, create a vector called 'recode'.
# These are the column names essentially.
to_recode <- c("class", "police", "courts", "government", "political_parties", "parliament", "armed_forces")
# Then, iterate through columns, replacing negative numbers with NAs
selected_data[,to_recode] <- lapply(selected_data[,to_recode], function(x){
car::recode(x," -2 = NA; -1 = NA; 4 = 1; 3 = 2; 2 = 3; 1 = 4")
})
# Gives us a visualisation which shows 'missingness' in the dataset.
aggr_plot <- VIM::aggr(selected_data, col=c('navyblue','red'), numbers = TRUE, sortVars = TRUE,
labels = names(data), cex.axis = .7, gap = 3,
ylab = c("Histogram of missing data","Pattern"))
install.packages("tidyverse")
# Read csv file
wvs <- read_csv("wvs6.csv")
# Get dimensions of dataset
dim(wvs)
# Select specific columns in dataset
selected_data <- wvs[c(4, 307, 113, 117, 118, 119, 120, 121)]
# Replace column names of dataset.
# Basically, the column names are a vector, so we can replace
# this with a vector of the same length.
colnames(selected_data) <- c("id", "class", "armed_forces", "police",
"courts", "government", "political_parties",
"parliament")
head(selected_data)
# Get a statistical summary of the dataset.
summary(selected_data)
# Turn class data into a factor.
# Because class is represented by numbers 1, 2, ... , 5, r thinks
# it is numerical/ continuous data, when in fact it is catergorical.
# Turning it into a factor fixes this.
selected_data$class <-  factor(selected_data$class, levels = c(1, 2, 3, 4, 5)
, labels = c("Upper class", "Upper middle class", "Lower middle class",
"Working class", "Lower class"))
# First, create a vector called 'recode'.
# These are the column names essentially.
to_recode <- c("class", "police", "courts", "government", "political_parties", "parliament", "armed_forces")
# Then, iterate through columns, replacing negative numbers with NAs
selected_data[,to_recode] <- lapply(selected_data[,to_recode], function(x){
car::recode(x," -2 = NA; -1 = NA; 4 = 1; 3 = 2; 2 = 3; 1 = 4")
})
# Gives us a visualisation which shows 'missingness' in the dataset.
aggr_plot <- VIM::aggr(selected_data, col=c('navyblue','red'), numbers = TRUE, sortVars = TRUE,
labels = names(data), cex.axis = .7, gap = 3,
ylab = c("Histogram of missing data","Pattern"))
head(selected_data)
# Convert data to a long format.
# Needs a key and value (the names for which we make up).
# -id and -class omits these columns from the function.
data_long <- gather(selected_data, key = "entity", value = "confidence", -id, -class)
head(data_long)
# Convert data to a wide format.
data_wide <- spread(data_long, key = "entity", value = "confidence")
head(data_wide)
time_df_long <- tibble(id = 1:10,
measure1_1 = rnorm(1:10),
measure1_2 = rnorm(1:10),
measure2_1 = rnorm(1:10),
measure2_2 = rnorm(1:10))
time_gathered <- gather(time_df_long, key = measure_time, value = value, -id)
head(time_gathered)
# Separating data.
# In this case splits at the underscore e.g measure1_1 is split
# into measure1 and 1.
time_split <- separate(time_gathered, col = "measure_time", into = c("measure", "time"))
# Selecting data from a data frame using conditionals.
# 'na.rm = T' means the function will skip over/ ignore NAs.
filter(data_wide, class == "Working class" & government > mean(government, na.rm = T))
# %in% works very much like IN for SQL
filter(data_wide, class %in% c("Working class", "Upper middle class"))
summary_plot <- Rmisc::summarySE(groupvars = c("entity", "class"),
measurevar = "confidence",
gathered,
na.rm = T
)
summary_plot <- Rmisc::summarySE(groupvars = c("entity", "class"),
measurevar = "confidence",
wvs,
na.rm = T
)
summary_plot <- Rmisc::summarySE(groupvars = c("entity", "class"),
measurevar = "confidence",
selected_data,
na.rm = T
)
view(selected\)
view(selected_data)
head(selected_data)
library(tidyverse)
view(selected_data)
data_long <- gather(selected_data, key = "entity", value = "confidence", -id, -class)
head(data_long)
# Using our data in long format, since this is what the funtion prefers
summary_plot <- Rmisc::summarySE(groupvars = c("entity", "class"),
measurevar = "confidence",
data_long,
na.rm = T
)
# Then, iterate through columns, replacing negative numbers with NAs
selected_data[,to_recode] <- lapply(selected_data[,to_recode], function(x){
car::recode(x," -2 = NA; -1 = NA; 4 = 1; 3 = 2; 2 = 3; 1 = 4")
})
# Gives us a visualisation which shows 'missingness' in the dataset.
aggr_plot <- VIM::aggr(selected_data, col=c('navyblue','red'), numbers = TRUE, sortVars = TRUE,
labels = names(data), cex.axis = .7, gap = 3,
ylab = c("Histogram of missing data","Pattern"))
data_long <- gather(selected_data, key = "entity", value = "confidence", -id, -class)
head(data_long)
# Using our data in long format, since this is what the funtion prefers
summary_plot <- Rmisc::summarySE(groupvars = c("entity", "class"),
measurevar = "confidence",
data_long,
na.rm = T
)
head(data_long)
# Convert data to a wide format.
data_wide <- spread(data_long, key = "entity", value = "confidence")
head(data_wide)
data_long <- gather(selected_data, key = "entity", value = "confidence", -id, -class)
head(data_long)
# Using our data in long format, since this is what the funtion prefers
summary_plot <- Rmisc::summarySE(groupvars = c("entity", "class"),
measurevar = "confidence",
data_long,
na.rm = T
)
summary_plot <- Rmisc::summarySE(groupvars = c("class", "entity"),
measurevar = "confidence",
data_long,
na.rm = T
)
